{
  "name": "fear-core-tasks",
  "version": "1.0.0",
  "description": "FEAR Core repo to automate certain core tasks",
  "main": "index.js",
  "scripts": {
    "eslint": "eslint test/ tasks/",
    "test": "mocha test/**/*.js tasks/**/*.js",
    "pretest": "npm run eslint",
    "watch:test": "onchange test/**/*.js tasks/**/*.js -- npm run test -s",
    "dev": "npm run watch:test -s",
    "postinstall": "node postinstall"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DigitalInnovation/fear-core-tasks.git"
  },
  "author": {
    "name": "Marton Hipszki",
    "email": "marton.hipszki@mnscorp.net"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/DigitalInnovation/fear-core-tasks/issues"
  },
  "homepage": "https://github.com/DigitalInnovation/fear-core-tasks",
  "dependencies": {
    "app-root-path": "1.0.0",
    "chai": "3.2.0",
    "chalk": "1.1.1",
    "eslint-config-fear-core": "git+https://github.com/digitalinnovation/fear-core-eslint-config",
    "extend": "2.0.1",
    "fs-extra": "0.24.0",
    "gulp": "3.9.0",
    "gulp-batch": "1.0.5",
    "gulp-eslint": "1.0.0",
    "gulp-mocha": "2.1.3",
    "gulp-protractor": "1.0.0",
    "gulp-scss-lint": "0.3.6",
    "gulp-util": "3.0.6",
    "gulp-watch": "4.3.5",
    "karma": "0.13.9",
    "karma-chai": "0.1.0",
    "karma-junit-reporter": "0.3.4",
    "karma-mocha": "0.2.0",
    "karma-mocha-reporter": "1.1.1",
    "karma-phantomjs-launcher": "0.2.1",
    "minimist": "1.2.0",
    "phantomjs": "1.9.18",
    "run-sequence": "1.1.4"
  },
  "devDependencies": {
    "eslint": "1.2.1",
    "onchange": "2.0.0"
  },
  "gitHead": "077bc9a3c081b359a778dd9a32be77382913b642",
  "readme": "# FEAR Core Tasks\n\nThis repo contains all core `gulp` tasks which can be configured and used in any FEAR projects alltogether or individually.\n\nThe Core tasks in this repo are provided in a factory function format for developer convenience, so you can use the functionality but can give any name to the task you create and configure it as much as the Core Task API makes it possible (see examples below).\n\n## Installation\n\nTo use any of the provided Core gulp tasks, please install the module first:\n\n```\n$ npm install --save-dev git+ssh://git@github.com:DigitalInnovation/fear-core-tasks.git\n```\n\n**PLEASE NOTE** the above command requires `npm` version `2.7.1` or above, see this [issue](https://github.com/npm/npm/issues/7121).\n\n### Post install script\n\nWhen `npm` installs the this core module, it will run the included `postinstall` script which copies default config files to the application / project's root folder, unless they exist.\n\n```\n$ npm install\nFEAR Core tasks: skipped copying default karma.conf.js\nFile already exists in project root\n```\n\nThis can help scaffolding a new project and also keeping our standards.\n\nThe copied default files are:\n\n- `.editorconfig`\n- `.eslintrc`\n- `.eslintignore`\n- `.gitignore`\n\nTake a look the `node_modules/fear-core-tasks/defaults` folder for more details.\n\n### Usage in gulptask.js\n\nIn `gulpfile.js` pull in `fear-core-tasks`\n\n```\nvar fearCoreTasks = require('fear-core-tasks');\n```\n\n## How to create a new core task\n\nAll core tasks are based on various Gulp plugins and Gulp itself. The basic idea is to create factory functions which can generate Gulp tasks.\n\nThese Gulp task \"instances\" can be also configured via the factory function's arguments e.g. `src` in the following example.\n\n```\n'use strict';\n\nvar gulp = require('gulp');\nvar eslint = require('gulp-eslint');\n\nmodule.exports = function taskFactory (src) {\n    return function task () {\n        return gulp.src(src)\n            .pipe(eslint())\n            .pipe(eslint.format())\n            .pipe(eslint.failOnError());\n    };\n};\n```\n\nwhich can be then exposed via the package's `index.js`\n\n```\n'use strict';\n\nmodule.exports = {\n    lintJavascript: require('./path/to/task/module'),\n};\n```\n\nand used in your `gulpfile.js` multiple times for different sources:\n\n```\nvar core = require('fear-core-tasks');\n\ngulp.task('lint-app', core.lintJavascript('app/**/*.js'));\ngulp.task('lint-specs', core.lintJavascript('test/specs/**/*.js'));\n```\n\n## Available Core tasks\n\n### Javascript linting\n\nThis is done by using [ESLint](http://eslint.org) and a default [FEAR Core ESLint config](https://github.com/DigitalInnovation/fear-core-eslint-config).\n\nIn your `gulpfile` register a new task by passing the glob array to the core `lintJavascript` method:\n\n```\ngulp.task('lint-javascript', fearCoreTasks.lintJavascript(['*.js']) );\n```\n\nalso, create an `.eslintrc` file in your project's root to extend the Core ESLint config:\n\n```\n// .eslintrc\n{\n    \"extends\": \"fear-core/node-config\"\n}\n```\n\nfor a browser specific project:\n\n```\n// .eslintrc\n{\n    \"extends\": \"fear-core/browser-config\"\n}\n```\n\n### Filtering Javascript linting results\n\nThe gulp task e.g. the `lint-javascript` above, can take two arguments `--rule` and `--keyword` from the command line, which will eventually filter the results and show only the related errors. The two can be used separately or combined:\n\n```\n$ gulp lint-javascript --rule strict\n$ gulp lint-javascript --keyword \"blaaa\"\n$ gulp lint-javascript --rule no-unused-vars --keyword \"firstVariable|secondVariable\"\n```\n\n### Javascript linting report\n\nThis core task gives you an overview of linting errors/warnings by rule having issues.\n\n```\n[12:29:51] Starting 'lint-report'...\n[12:29:51] linting errors 1 warnings 0 rule no-unused-vars\n[12:29:51] linting errors 3 warnings 0 rule no-console\n[12:29:51] total linting errors 4 warnings 0\n[12:29:51] Finished 'lint-report' after 205 ms\n```\n\nThis can help you to prioritise which linting issues should be fixed first or to decide which rules to turn off.\n\nIn your `gulpfile` register a new task similar to the `lint` task, but use the core `lintReport` method:\n\n```\ngulp.task('lint-report', fearCoreTasks.lintReport(['*.js']) );\n```\n\nThe `lint-report` task uses the exact same rules which the `lint` task does, giving you a summary on all rules which have errors or warnings, aggregating the number of issues.\n\n### Watch: running tasks on file change\n\nThe `watch` core task can be used to watch certain files and run the necessary tasks on file change e.g. lint or test.\n\nIn your `gulpfile` register a new task using the core `watch` method:\n\n```\ngulp.task('watch', fearCoreTasks.watch(['*.js'], ['lint', 'test']));\n```\n\nThe `watch` task accepts a glob of files and an array of tasks to run on file changes, e.g. on each Javascript file change it will run the `lint` and then the `test` task in *sequence* using the `run-sequence` gulp plugin.\n\nThere's also an option to add more watches at once, listening to changes of different files and run the appropriate tasks:\n\n```\ngulp.task('watch', function () {\n    fearCoreTasks.watch(['*.js'], ['lint', 'test']);\n    fearCoreTasks.watch(['*.scss'], ['compile-sass']);\n});\n```\n\nAlso, there's an optional 3rd parameter to run a specific `gulp` processing first on changed files:\n\n```\nfunction runThisFirstOnChanged (files) {\n    return gulp.src(files).pipe(lint());\n}\n\ngulp.task('watch', fearCoreTasks.watch(['*.js'], ['test', 'build'], runThisFirstOnChanged));\n```\n\nIn the above example, we run linting (only) on the changed files, then the defined tasks will run. If there's a linting error, the rest of the tasks will not run.\n\n### Watching and linting Javascript files\n\nA core task is provided to watch a set of files and run linting on each saved file. This helps you to focus on a single file's linting issues.\n\nIn your `gulpfile` register a new task using the core `watchAndLintOnChange` method:\n\n```\ngulp.task('watch-and-lint', fearCoreTasks.watchAndLintOnChange(['*.js']));\n```\n\nWhen there's a linting error in the file recently saved, you'll see it in the console:\n\n```\n[10:04:41] linting error\n/path/to/file/.js\n  35:60  error  Missing semicolon  semi\n\nâœ– 1 problem (1 error, 0 warnings)\n```\n\nAfter resolving the linting issue, when you save the file you'll see the success message:\n\n```\n[10:05:41] linting OK /path/to/file/.js\n```\n\n### Watching and linting SCSS files\n\nAny `.scss` file can be watched and linted on change via [gulp-scss-lint](https://github.com/juanfran/gulp-scss-lint).\n\nIn your `gulpfile` register a new task by passing the `scss-lint` options and the glob array to the core `lintSassOnChange` method:\n\n```\ngulp.task('lint-scss', function () {\n    var options = { config: '.my-rules.yml' };\n    var lintSassOnChange = fearCoreTasks.lintSassOnChange(options);\n    fearCoreTasks.watch(['sass/**/*.scss'], ['compile'], lintSassOnChange );\n});\n```\n\nThe above task will watch all `.scss` files under the `sass/` folder and run linting on the changed file(s), finally compile SASS to CSS via the `compile` task.\n\n### Running unit tests\n\nWe're running unit tests via [Karma](http://karma-runner.github.io/) test runner. There's a preconfigured `karma.conf.js` using `mocha` as the testing framework and `chai` as the assertion library.\n\nBoth `mocha` and `chai` is pulled in as a plugin to Karma, so the only thing you have to do is to start writing your unit tests:\n\n```\n'use strict';\n\ndescribe('a component under test', function () {\n\n    it('should be unit tested', function() {\n        expect(true).to.be.true;\n    });\n\n});\n```\n\n#### Targeted browsers\n\nThe default Karma config uses [PhantomJS 1.9.x](http://phantomjs.org/) as the default targeted browser to run the test suite on your local dev machine and get feedback quickly.\n\nYou can run the test suite in other browsers as well, also in parallel:\n\n```\n// karma.config.js\n'use strict';\n\nmodule.exports = function (config) {\n    config.set({\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS', 'Chrome', 'Safari']\n\n    });\n};\n```\n\nbut you have to install the appropriate launcher e.g.\n\n```\n$ npm install --save-dev karma-safari-launcher\n```\n\n#### Running unit test once\n\nTo run your unit test suite via Karma, register a new task in your `gulpfile` and pass an object referring to a `karma.conf.js` file, also override any Karma config options in there:\n\n```\ngulp.task('run-unit-tests-once', fearCoreTasks.startKarmaServer({\n    configFile: __dirname + '/karma.conf.js',\n    files: [ 'test/**/*.spec.js' ],\n    singleRun: true\n}));\n```\n\n#### Continuously running unit tests\n\nWhen you're practicing TDD, it's important to continuously run your unit test suite on every file change. To achieve that, we start a Karma server with the following gulp task:\n\n```\ngulp.task('start-karma-server', fearCoreTasks.startKarmaServer({\n    configFile: __dirname + '/karma.conf.js',\n    files: [ 'test/**/*.spec.js' ]\n}));\n```\n\nThe above example starts a Karma server which is waiting for another task to trigger the running of the test suite.\n\nIn order to trigger Karma to run the test suite, use the following example in your `gulpfile.js`:\n\n```\ngulp.task('run-unit-tests', fearCoreTasks.startKarmaRunner({\n    configFile: __dirname + '/karma.conf.js'\n}));\n```\n\nRunning also `gulp watch` in a separate terminal window, will look for file changes and run the unit test suite each time you save a file.\n\n#### Using your own Karma config\n\nTo use your own Karma config amend the path to which the `configFile` property points to:\n\n```\n// e.g. karma.conf.js in your project's root\ngulp.task('start-karma', fearCoreTasks.startKarmaRunner({\n    configFile: __dirname + '/karma-custom.conf.js'\n}));\n```\n\nor amend the existing (default) `karma.conf.js` under your project's root folder.",
  "readmeFilename": "README.md",
  "_id": "fear-core-tasks@1.0.0",
  "_shasum": "7a315de41f2a30537f254c2cc8ee6c5e96c904dd",
  "_from": "../../../../../../var/folders/sd/1p38z21j0kxfthyrfsmg2lwc0000gp/T/npm-60727-90e1e807/git-cache-f2212bd8fd74/077bc9a3c081b359a778dd9a32be77382913b642",
  "_resolved": "git+https://github.com/digitalinnovation/fear-core-tasks#077bc9a3c081b359a778dd9a32be77382913b642"
}
